// GENERATED by @edgedb/generate v0.4.1

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $HasAddressλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "address": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "addressDetail": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "city": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "country": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "zipCode": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
}>;
type $HasAddress = $.ObjectType<"default::HasAddress", $HasAddressλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $HasAddress = $.makeType<$HasAddress>(_.spec, "dfb32aa2-e1e1-11ee-848d-1595be77f55e", _.syntax.literal);

const HasAddress: $.$expr_PathNode<$.TypeSet<$HasAddress, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($HasAddress, $.Cardinality.Many), null);

export type $HasTimestampsλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "createdAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, true, true>;
  "updatedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
}>;
type $HasTimestamps = $.ObjectType<"default::HasTimestamps", $HasTimestampsλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $HasTimestamps = $.makeType<$HasTimestamps>(_.spec, "dfb43398-e1e1-11ee-872a-8bb8ef159eba", _.syntax.literal);

const HasTimestamps: $.$expr_PathNode<$.TypeSet<$HasTimestamps, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($HasTimestamps, $.Cardinality.Many), null);

export type $CompanyλShape = $.typeutil.flatten<$HasAddressλShape & $HasTimestampsλShape & {
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "euTaxNumber": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "facebook": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "instagram": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "linkedin": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "threads": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "tiktok": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "website": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "organizerCode": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "companyEmail": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
}>;
type $Company = $.ObjectType<"default::Company", $CompanyλShape, null, [
  ...$HasAddress['__exclusives__'],
  ...$HasTimestamps['__exclusives__'],
  {companyEmail: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Company = $.makeType<$Company>(_.spec, "dfb5bc72-e1e1-11ee-b059-2bcf71e84b14", _.syntax.literal);

const Company: $.$expr_PathNode<$.TypeSet<$Company, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Company, $.Cardinality.Many), null);

export type $EventλShape = $.typeutil.flatten<$HasAddressλShape & $HasTimestampsλShape & {
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "emailValidation": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "placeName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "organizer": $.LinkDesc<$Organizer, $.Cardinality.One, {}, false, false,  false, false>;
  "tickets": $.LinkDesc<$Ticket, $.Cardinality.Many, {}, false, true,  false, false>;
  "endsAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "startsAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "startsAtHour": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "<event[is Organizer]": $.LinkDesc<$Organizer, $.Cardinality.Many, {}, false, false,  false, false>;
  "<event[is Ticket]": $.LinkDesc<$Ticket, $.Cardinality.Many, {}, false, false,  false, false>;
  "<event": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Event = $.ObjectType<"default::Event", $EventλShape, null, [
  ...$HasAddress['__exclusives__'],
  ...$HasTimestamps['__exclusives__'],
]>;
const $Event = $.makeType<$Event>(_.spec, "dfb7ab22-e1e1-11ee-a037-4b23736a141a", _.syntax.literal);

const Event: $.$expr_PathNode<$.TypeSet<$Event, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Event, $.Cardinality.Many), null);

export type $OrganizerλShape = $.typeutil.flatten<$HasAddressλShape & $HasTimestampsλShape & {
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "firstName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "lastName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "phone": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "event": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, true,  false, false>;
  "organizerCode": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<organizer[is Event]": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, false,  false, false>;
  "<organizer": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Organizer = $.ObjectType<"default::Organizer", $OrganizerλShape, null, [
  ...$HasAddress['__exclusives__'],
  ...$HasTimestamps['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Organizer = $.makeType<$Organizer>(_.spec, "dfba8b3a-e1e1-11ee-99c2-a572c24bbcbd", _.syntax.literal);

const Organizer: $.$expr_PathNode<$.TypeSet<$Organizer, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Organizer, $.Cardinality.Many), null);

export type $TicketλShape = $.typeutil.flatten<$HasTimestampsλShape & {
  "event": $.LinkDesc<$Event, $.Cardinality.One, {}, false, false,  false, false>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "firstName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "fullName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "inviteCode": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "lastName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "organizationName": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "phone": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "token": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<tickets[is Event]": $.LinkDesc<$Event, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tickets": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Ticket = $.ObjectType<"default::Ticket", $TicketλShape, null, [
  ...$HasTimestamps['__exclusives__'],
  {token: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Ticket = $.makeType<$Ticket>(_.spec, "dfbd93fc-e1e1-11ee-87d7-f9f4af9d6e36", _.syntax.literal);

const Ticket: $.$expr_PathNode<$.TypeSet<$Ticket, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Ticket, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<$HasAddressλShape & $HasTimestampsλShape & {
  "email": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "firstName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "lastName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "phone": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "organizerCode": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$HasAddress['__exclusives__'],
  ...$HasTimestamps['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $User = $.makeType<$User>(_.spec, "dfc05894-e1e1-11ee-af01-ed5c1be58b29", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $companyNewsλShape = $.typeutil.flatten<$HasTimestampsλShape & {
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $companyNews = $.ObjectType<"default::companyNews", $companyNewsλShape, null, [
  ...$HasTimestamps['__exclusives__'],
]>;
const $companyNews = $.makeType<$companyNews>(_.spec, "dfaea1ae-e5d7-11ee-afa9-1b566080e45e", _.syntax.literal);

const companyNews: $.$expr_PathNode<$.TypeSet<$companyNews, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($companyNews, $.Cardinality.Many), null);



export { $HasAddress, HasAddress, $HasTimestamps, HasTimestamps, $Company, Company, $Event, Event, $Organizer, Organizer, $Ticket, Ticket, $User, User, $companyNews, companyNews };

type __defaultExports = {
  "HasAddress": typeof HasAddress;
  "HasTimestamps": typeof HasTimestamps;
  "Company": typeof Company;
  "Event": typeof Event;
  "Organizer": typeof Organizer;
  "Ticket": typeof Ticket;
  "User": typeof User;
  "companyNews": typeof companyNews
};
const __defaultExports: __defaultExports = {
  "HasAddress": HasAddress,
  "HasTimestamps": HasTimestamps,
  "Company": Company,
  "Event": Event,
  "Organizer": Organizer,
  "Ticket": Ticket,
  "User": User,
  "companyNews": companyNews
};
export default __defaultExports;
